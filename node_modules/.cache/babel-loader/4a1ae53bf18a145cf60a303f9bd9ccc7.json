{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...(previousResponse.data || []), ...(response.data || [])],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const fetchNextPage = useCallback(async () => {\n    if (!(paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.nextPage)) return [];\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions.nextPage\n    });\n    if (!response) return [];\n    setPaginatedTransactions(prev => {\n      var _prev$data;\n\n      return {\n        data: [...((_prev$data = prev === null || prev === void 0 ? void 0 : prev.data) !== null && _prev$data !== void 0 ? _prev$data : []), ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n    return response.data;\n  }, [paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"myJOUlkRG6WXfr+zcnvyIPCKM90=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","fetchNextPage","prev","invalidateData"],"sources":["/Users/may/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      return { data: [...(previousResponse.data || []),\n        ...(response.data || []),\n      ], \n      nextPage: response.nextPage}\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  \n\n  \n  const fetchNextPage = useCallback(async () => {\n    if (!paginatedTransactions?.nextPage) return []\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions.nextPage,\n      }\n    )\n    if (!response) return []\n\n    setPaginatedTransactions((prev) => ({\n      data: [...(prev?.data ?? []), ...response.data],\n      nextPage: response.nextPage,\n    }))\n\n    \n\n    return response.data\n  }, [paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MAED,OAAO;QAAEI,IAAI,EAAE,CAAC,IAAID,gBAAgB,CAACC,IAAjB,IAAyB,EAA7B,CAAD,EACb,IAAIJ,QAAQ,CAACI,IAAT,IAAiB,EAArB,CADa,CAAR;QAGPF,QAAQ,EAAEF,QAAQ,CAACE;MAHZ,CAAP;IAID,CATuB,CAAxB;EAUD,CAlB2B,EAkBzB,CAACP,cAAD,EAAiBE,qBAAjB,CAlByB,CAA5B;EAuBA,MAAMQ,aAAa,GAAGd,WAAW,CAAC,YAAY;IAC5C,IAAI,EAACM,qBAAD,aAACA,qBAAD,eAACA,qBAAqB,CAAEK,QAAxB,CAAJ,EAAsC,OAAO,EAAP;IAEtC,MAAMF,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,CAACK;IAD9B,CAFmC,CAArC;IAMA,IAAI,CAACF,QAAL,EAAe,OAAO,EAAP;IAEfF,wBAAwB,CAAEQ,IAAD;MAAA;;MAAA,OAAW;QAClCF,IAAI,EAAE,CAAC,kBAAIE,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEF,IAAV,mDAAkB,EAAlB,CAAD,EAAwB,GAAGJ,QAAQ,CAACI,IAApC,CAD4B;QAElCF,QAAQ,EAAEF,QAAQ,CAACE;MAFe,CAAX;IAAA,CAAD,CAAxB;IAOA,OAAOF,QAAQ,CAACI,IAAhB;EACD,CAnBgC,EAmB9B,CAACP,qBAAD,CAnB8B,CAAjC;EAqBA,MAAMU,cAAc,GAAGhB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDQ;EAAlD,CAAP;AACD;;GAvDeb,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}